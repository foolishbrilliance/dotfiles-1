#!/usr/bin/env zsh
#
# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.

# Default options
FULL=false
for arg in "$@"
do
  case "$arg" in
    -f|--full)
      # Update all the things, else only perform fast partial update
      FULL=true
      ;;
  esac
done

#
# for printing status messages
#

# new way: print_status $? "update x"
print_status () {
  if [[ ${1} == 0 ]]; then
    echo -e "[\e[32mOK\e[39m] ${2}"
  else
    echo -e "[\e[31mFAILED\e[39m] ${2}"
  fi
}

# Dotfiles
cd ${HOME}/.dotfiles && git pull >/dev/null
print_status $? "update personal dotfiles"

# Grml config
cd ~/.grml-etc-core && git pull >/dev/null
print_status $? "update grml config"

if [ ${FULL} != true ]; then
  exit 0
fi

##########################################################
##### Full Update ########################################
##########################################################

# Vim
cd ~/.vim/plugins/repos/github.com/Shougo/dein.vim && git pull >/dev/null
print_status $? "install vim plugin manager (Dein)"
vim +'call dein#update()' +qall
print_status $? "install vim plugins"

# Tmux Plugin Manager (tpm) and plugins
if [ ! -d "${HOME}/.tmux/plugins/tpm" ]; then
  if [ -L "${HOME}/.tmux" ]; then
    unlink ~/.tmux
  fi
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins
  print_status $? "install tmux plugin manager (tpm) and plugins"
else
  ~/.tmux/plugins/tpm/bin/update_plugins all >/dev/null
  print_status $? "update tpm and plugins"
fi

# zsh zgen plugins
[ -d $HOME/.zgen ] || git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"
[ -d $HOME/.zgen ] && source "${HOME}/.zgen/zgen.zsh" && zgen selfupdate &>/dev/null && zgen update &>/dev/null
print_status $? "update zsh plugins"

# Doom Emacs
~/.emacs.d/bin/doom upgrade &>/dev/null
print_status $? "update Doom Emacs"

################################################################################
# Mac only for rest of script
################################################################################
if [ "$(uname)" != "Darwin" ]; then
  exit 0
fi

# echo colors, for example: update_command && clr_green "Updated." || clr_red "Update failed."
source ~/.bash_colors

# Brew
cd
brew update
brew upgrade
brew cleanup -s
brew cask cleanup
# Diagnotics
brew doctor
brew missing

# Node
npm update -g

# Ruby
gem update && clr_green "Updated Ruby gems." || clr_red "Ruby gem update failed."

# Python
python3 -m pip install --upgrade pip
python2 -m pip install --upgrade pip
python3 -m pip install --upgrade setuptools
python2 -m pip install --upgrade setuptools
#pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U && clr_green "Updated pip packages." || clr_red "pip packages update failed."
pip3 freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U && clr_green "Updated pip3 packages." || clr_red "pip3 packages update failed."
pip2 freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip2 install -U && clr_green "Updated pip2 packages." || clr_red "pip2 packages update failed."

if [[ $(mas outdated) ]]; then
  clr_brown "You can run 'mas upgrade' to upgrade theses apps from the app store:"
  mas outdated
else
  clr_green "Mac App Store up to date."
fi
