#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email? How about joech4n@users.noreply.github.com?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

setup_ohmyzsh () {
  if ! [ -d $HOME/.oh-my-zsh ]
  then
    info 'setup oh-my-zsh'
    git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
    success 'oh-my-zsh'
  fi
}

setup_prezto () {
  if ! [ -d $HOME/.zprezto ]
  then
    info 'setup prezto'
    git clone --recursive git@github.com:joech4n/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
    zsh <<'EOF'
    setopt EXTENDED_GLOB; for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"; done
EOF
    success 'prezto'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_vim () {
  info 'installing dein'
  DEIN_DIR=~/.vim/repos/github.com/Shougo/dein.vim
  if [[ ! -d $DEIN_DIR ]]; then
    curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh |tee /tmp/dein-installer.sh
    chmod +x /tmp/dein-installer.sh
    /tmp/dein-installer.sh ~/.vim/bundles
    success "dein installed"
  else
    success "skipping. dein already installed"
  fi
}

# Required for other install-Darwin.sh scripts
install_homebrew () {
  info 'install homebrew'
  if ! command -v brew >/dev/null 2>&1
  then
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" |tee /tmp/homebrew-install.log
    brew update
    brew upgrade
    success 'homebrew installed'
  else
    success 'skipping. homebrew already installed'
  fi
}

# Mac app store command line
install_mas () {
  info 'install mas'
  if ! command -v mas >/dev/null 2>&1
  then
    brew install mas
    success 'mas installed'
  else
    success 'skipping. mas already installed'
  fi
}

setup_fish () {
  info 'setup fish'
  if ! command -v fish >/dev/null 2>&1
  then
    brew install fish || sudo apt-get install -y fish || sudo yum install -y fish
    success 'fish installed'
  else
    success 'skipping. fish already installed'
  fi

  info 'cloning fish dotfiles'
  if [[ ! -d $HOME/.config/fish ]]; then
    git clone git@github.com:joech4n/fish-dotfiles.git $HOME/.config/fish
    success 'fish dotfiles cloned'
  else
    success 'skipping. fish dotfiles already cloned'
  fi
}

# Must be first
if [ "$(uname)" == "Darwin" ]; then
  install_homebrew
  install_mas
fi
# If no args given run interactive stuff
if [ $# -eq 0 ]; then
    setup_gitconfig
fi
install_dotfiles
setup_vim

echo ''
echo '  All installed!'
