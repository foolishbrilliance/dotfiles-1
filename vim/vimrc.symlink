" vimrc

" Must be first uncommented line as it affects other options
set nocompatible

" The fish shell is not supported before 7.4.276
" https://code.google.com/p/vim/source/detail?r=a6b59ee633a355095e6473ec5e2a7d9088bfb853
if v:version < 704 || (v:version == 704 && !has('patch276'))
endif
" Do it anyway because Vundle breaks with fish
if $SHELL =~ 'bin/fish' | set shell=/bin/sh | endif

"
" Setup folder structure
"

if !isdirectory(expand('~/.vim.private/undo/', 1))
    silent call mkdir(expand('~/.vim.private/undo', 1), 'p')
endif

if !isdirectory(expand('~/.vim.private/backup/', 1))
    silent call mkdir(expand('~/.vim.private/backup', 1), 'p')
endif

if !isdirectory(expand('~/.vim.private/swap/', 1))
    silent call mkdir(expand('~/.vim.private/swap', 1), 'p')
endif

" Turn on persistent undo
" Thanks, Mr Wadsten: github.com/mikewadsten/dotfiles/
if has('persistent_undo')
    set undodir=~/.vim.private/undo//
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

" Use backups
" Source:
"   http://stackoverflow.com/a/15317146
set backup
set writebackup
set backupdir=~/.vim.private/backup//

" Use a specified swap folder
" Source:
"   http://stackoverflow.com/a/15317146
set directory=~/.vim.private/swap//

" Enable colors on Solaris
if $OSTYPE =~ "solaris"
  set term=xtermc
endif

"
" gVIM
"
if has('gui_running')   " from http://ethanschoonover.com/solarized/vim-colors-solarized
  set background=light
  set guifont=Consolas:h18
  set clipboard=unnamed " share clipboard with OSX
else
  set background=dark
endif

set autochdir           " set working directory to file in buffer
set backspace=2         " allow backspace beyond insertion point
set backspace=indent,eol,start
set ic                  " ignore case
set laststatus=2        " always show status line
set nocompatible        " disable vi compatibility
" set paste               " don't alter my pasting
set pastetoggle=<F2>
set report=1            " always report changes
set smartcase           " Ignore case when doing a search...
set hlsearch            " ...as well as highlight it...
set incsearch           " ...as it is typed
set report=0            " Report when more than 0 lines affected
set showmatch           " Highlight matching brace when typing second one
set shortmess=I         " Don't show the startup message
set statusline=%<%f%h%m%r%w%y%=%l/%L,%c\ %P\ \|\ %n " custom status line

" Turn off system beep
set vb t_vb=

" Splits
set splitbelow          " Open to bottom first
set splitright          " Open to right first

" Tabs
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove trailing whitespace
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<cr>
        normal `z
        retab
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom keybindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" change the mapleader from \ to , (mapleader will be used for custom mappings)
let mapleader=","

" use :wq! instead
nmap ZZ <Nop>

" <alt-space> turns into <Esc>
map <Esc><20> <Nop>
" <Alt-:> to jump from insert/visual to command mode
inoremap <Esc>; <Esc>:
vnoremap <Esc>; <Esc>:

" Quickly edit/reload the vimrc file
"nmap <silent> <leader>sv :e $MYVIMRC<CR>
map <Leader>v  :so ~/.vimrc<CR>
" Auto load .vimrc on write
au! BufWritePost .vimrc source %

" Transpose words
nmap <silent> gw    "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l> *N*

" Change tab settings
nmap <leader>2:set shiftwidth=2<CR>:set softtabstop=2<CR>:set tabstop=2<CR>
nmap <leader>4:set shiftwidth=4<CR>:set softtabstop=4<CR>:set tabstop=4<CR>
nmap <leader>8:set shiftwidth=8<CR>:set softtabstop=8<CR>:set tabstop=8<CR>

"
" tabs
"
nnoremap <leader>tl :BuffergatorTabsToggle<cr>
nmap <leader>ti :tabnext<CR>
nmap <leader>th :tabprev<CR>
nmap <leader>nt :tabnew<CR>

"
" buffers
"
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden

" To open a new empty buffer
nmap <leader>nb :enew<cr>
" Move to the next buffer
nmap <leader>i :bnext<CR>
" Move to the previous buffer
nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Cycle through MRU buffers
nmap <leader>nn :BuffergatorMruCyclePrev<cr>
nmap <leader>ee :BuffergatorMruCycleNext<cr>

" Show all open buffers and their status

" Buffer search
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>
nmap <leader>bl :CtrlPBuffer<CR>
nmap <leader>bg :BuffergatorToggle<cr>

nmap <leader>p :CtrlPMRU<CR>

" Unhighlight the last search pattern on Enter
nnoremap <silent><CR> :noh<return><CR>

" Format paragraph to textwidth
nmap <leader>f <Esc>gq}<CR>

" Remove trailing whitespace
nmap <leader>W :cal StripTrailingWhitespace()<cr>

" Blank line above
nmap <space>O O<Esc>
" Blank line below
nmap <space>o o<Esc>

" Comment and uncomment out a section (uses marks 'a and 'b)
nmap <space>z :'a,'b s/^/#/
nmap <space>y :'a,'b s/#//

" Duplicate line, comment original using vim-commentary
nmap <space>n YPgccj<Esc>

" Insert timestamps
inoremap <silent> <C-G><C-T> <C-R>=repeat(complete(col('.'),map(["%Y-%m-%d %H:%M:%S","%a, %d %b %Y %H:%M:%S %z","%Y %b %d","%d-%b-%y","%a %b %d %T %Z %Y"],'strftime(v:val)')+[localtime()]),0)<CR>

" Automatically set paste mode in Vim when pasting in insert mode per
" https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'kien/ctrlp.vim'
Plugin 'jeetsukumaran/vim-buffergator'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'altercation/vim-colors-solarized'
Plugin 'justinmk/vim-sneak'
Plugin 'haya14busa/incsearch.vim'
Plugin 'michaeljsmith/vim-indent-object'
"Plugin 'Lokaltog/vim-easymotion'
Plugin 'airblade/vim-gitgutter'
"Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'sjl/gundo.vim.git'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin configs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" vim-airline
"

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline_theme='solarized'
" let g:airline_powerline_fonts = 1

"
" CtrlP
"
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP' " quick buffer switching

let g:ctrlp_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files'],
            \ },
            \ 'fallback': 'find %s -type f'
            \ }

" Use nearest .git dir
let g:ctrlp_working_path_mode = 'ra'

"
" Buffergator
"
let g:buffergator_suppress_keymaps = 1

"
" incsearch.vim
"
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"
" Solarized
" Theme not accessible until Bundle comamnd is run per
" https://github.com/gmarik/Vundle.vim/issues/119#issuecomment-3089931
call togglebg#map("<F4>")
syntax enable
"let g:solarized_termcolors=256
colorscheme joe

"
" EasyMotion
"
"let g:EasyMotion_do_mapping = 0 " Disable default mappings
"
"" Bi-directional find motion
"" Jump to anywhere you want with minimal keystrokes, with just one key binding.
"" `s{char}{label}`
"nmap s <Plug>(easymotion-s2)
"nmap t <Plug>(easymotion-t2)
"
"" `s{char}{char}{label}`
"" Need one more keystroke, but on average, it may be more comfortable.
""nmap s <Plug>(easymotion-s2)
"
"" Turn on case sensitive feature
"let g:EasyMotion_smartcase = 1
"
"" JK motions: Line motions
"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)

"
" Sneak
"
let g:sneak#streak = 1
let g:sneak#s_next = 1
let g:sneak#use_ic_scs = 1

"
" gitgutter
"
" For the same appearance as your line number column
highlight clear SignColumn

"
" Gundo
"
nnoremap <F5> :GundoToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AutoCommands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Move help to right, resize 80
if has('autocmd')
  function! ILikeHelpToTheRight()
    if !exists('w:help_is_moved') || w:help_is_moved != "right"
      wincmd L
      vertical resize 80
      let w:help_is_moved = "right"
    endif
  endfunction

  augroup HelpPages
    autocmd FileType help nested call ILikeHelpToTheRight()
  augroup END
endif

" Deprecated
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Not sure why I have this... research later
" :nnoremap <Leader>s :let @x=@" \| let @"=@a \| let @a=@b \| let @b=@x<CR>

" Timestamps
" map ,t <Esc>o# Created: TIME<Esc>ASTAMP by foolishbrilliance<CR># Last Modified: TIME<Esc>ASTAMP by foolishbrilliance<Esc>

" Toggle Spell-check
" nmap ,s <C-o>:setlocal spell! spelllang=en_gb<CR>
" nmap ,s :setlocal spell! spelllang=en_gb<CR>
