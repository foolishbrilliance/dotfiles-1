if v:version < 704 || (v:version == 704 && !has('patch276'))
endif
" Do it anyway because Vundle breaks with fish
if $SHELL =~ 'bin/fish' | set shell=/bin/sh | endif

"
" Setup folder structure
"

if !isdirectory(expand('~/.vim.private/undo/', 1))
    silent call mkdir(expand('~/.vim.private/undo', 1), 'p')
endif

if !isdirectory(expand('~/.vim.private/backup/', 1))
    silent call mkdir(expand('~/.vim.private/backup', 1), 'p')
endif

if !isdirectory(expand('~/.vim.private/swap/', 1))
    silent call mkdir(expand('~/.vim.private/swap', 1), 'p')
endif

" Turn on persistent undo
" Thanks, Mr Wadsten: github.com/mikewadsten/dotfiles/
if has('persistent_undo')
    set undodir=~/.vim.private/undo//
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

" Use backups
" Source:
"   http://stackoverflow.com/a/15317146
set backup
set writebackup
set backupdir=~/.vim.private/backup//

" Use a specified swap folder
" Source:
"   http://stackoverflow.com/a/15317146
set directory=~/.vim.private/swap//

" Enable colors on Solaris
if $OSTYPE =~ "solaris"
  set term=xtermc
endif

set autochdir           " set working directory to file in buffer
set autoindent
set autowrite
set backspace=2         " allow backspace beyond insertion point
set backspace=indent,eol,start
set display=lastline
set fileformats=unix,dos,mac
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column
  if &grepformat !~# '%c'
    set grepformat^=%f:%l:%c:%m
  endif
endif
set hlsearch            " ...as well as highlight it...
if has("eval")
  let &highlight = substitute(&highlight,'NonText','SpecialKey','g')
endif
set ic                  " ignore case
set incsearch           " ...as it is typed
set laststatus=2        " always show status line
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  let &listchars = "tab:\u21e5\u00b7,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
  let &fillchars = "vert:\u259a,fold:\u00b7"
else
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<
endif
set mouse=nvi
set mousemodel=popup
set nocompatible        " disable vi compatibility
set pastetoggle=<F2>    " don't alter my pasting
set report=0            " Report when more than 0 lines affected
set report=1            " always report changes
set scrolloff=1         " Always show one line below or above cursor for context
set shortmess=I         " Don't show the startup message
set showmatch           " Highlight matching brace when typing second one
set sidescrolloff=5
set smartcase           " Ignore case when doing a search...
set statusline=%<%f%h%m%r%w%y%=%l/%L,%c\ %P\ \|\ %n " custom status line
"set timeoutlen=1200    " A little bit more time for macros
set ttimeoutlen=10      " Make Esc work faster
set vb t_vb=            " Turn off system beep
set wrap

" Splits
set splitbelow          " Open to bottom first
set splitright          " Open to right first

" Tabs
set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2

"
" gVIM
"
if has('gui_running')   " from http://ethanschoonover.com/solarized/vim-colors-solarized
  cabbrev q <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'close' : 'q')<CR>
  set background=light
  set guifont=Consolas:h18
  "set clipboard=unnamed " share clipboard with OSX
  if exists('+macmeta')
    set macmeta
  endif
else
  set background=dark
endif

if !has("gui_running") && $DISPLAY == '' || !has("gui")
  set mouse=
endif

if has("dos16") || has("dos32") || has("win32") || has("win64")
  if $PATH =~? 'cygwin' && ! exists("g:no_cygwin_shell")
    set shell=bash
    set shellpipe=2>&1\|tee
    set shellslash
  endif
elseif has("mac")
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom keybindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" change the mapleader from \ to , (mapleader will be used for custom mappings)
let mapleader=","

" use :wq! instead
nmap ZZ <Nop>

" avoid <esc>
inoremap <Leader><Leader> <Esc>`^
inoremap jj <Esc>`^
inoremap <C-C> <Esc>`^
" Not sure if it's a bad idea to remap <Esc>
"inoremap <Esc> <Esc>`^
map  <F1>   <Esc>
map! <F1>   <Esc>

" quick write
"inoremap zne <Esc>:w<CR>`^i
inoremap zne <Esc>:w<CR>
nnoremap zne <Esc>:w<CR>

" call actions from other modes
inoremap <M-o>      <C-O>o
inoremap <M-O>      <C-O>O
inoremap <M-h>      <Left>
inoremap <M-i>      <C-O>^
inoremap <M-a>      <C-O>$
noremap! <C-J>      <Down>
noremap! <C-K><C-K> <Up>

nnoremap Y  y$

nnoremap gs :%s/
xnoremap gs :s/

" expands %% to current file's directory in command-line mode
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>
cnoremap <C-O>      <Up>

" [S]plit line (sister to [J]oin lines)
" cc still substitutes the line like S would
nnoremap S i<CR><Esc>^mwgk:silent! s/\v +$//<CR>:noh<CR>

" visually select the last paste or change
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" Unhighlight the last search pattern on Enter
nnoremap <silent><CR> :noh<return><CR>

" Format paragraph to textwidth
nmap <leader>f <Esc>gq}<CR>

" Print modeline
inoremap <C-X>^ <C-R>=substitute(&commentstring,' \=%s\>'," -*- ".&ft." -*- vim:set ft=".&ft." ".(&et?"et":"noet")." sw=".&sw." sts=".&sts.':','')<CR>

if exists(":nohls")
  nnoremap <silent> <C-L> :nohls<CR><C-L>
endif

" Invert background
command! -bar Invert :let &background = (&background=="light"?"dark":"light")

" Transpose words
nmap <silent> gw    "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l>

"
" tabs
"
nnoremap <leader>tl :BuffergatorTabsToggle<cr>
nmap <leader>ti :tabnext<CR>
nmap <leader>th :tabprev<CR>
nmap <leader>tn :tabnew<CR>

"
" buffers
"
set hidden

" To open a new empty buffer
nmap <leader>bn :enew<cr>
nmap <leader>nb :enew<cr>
" Move to the next buffer
nmap <leader>i :bnext<CR>
" Move to the previous buffer
nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one. This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
" delete (close) buffer
nmap <leader>bd :bd<CR>
nmap <leader>b!! :bd!<CR>
nmap <leader>bd! :bd!<CR>
" last active buffer
nmap <BS> :b#<CR>

" primitive buffer switching/splitting
nnoremap <Leader>bb :ls<CR>:b<Space>
nnoremap <Leader>g :ls<CR>:b<Space>
nnoremap <leader>sh :ls<CR>:sbuffer<Space>
nnoremap <leader>sv :ls<CR>:vertical sbuffer<Space>

" buffer search
nmap <leader>bf :CtrlP<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>
nmap <leader>bl :CtrlPBuffer<CR>
nmap <leader>bg :BuffergatorToggle<cr>
nmap <leader>p :CtrlPMRU<CR>
" Cycle through MRU buffers
nmap <leader>nn :BuffergatorMruCyclePrev<cr>
nmap <leader>ee :BuffergatorMruCycleNext<cr>

"
" windows
"
nnoremap <C-h> <C-w>h
nnoremap <C-n> <C-w>j
nnoremap <C-e> <C-w>k
nnoremap <C-i> <C-w>l
nnoremap <Leader>wc <C-w>c

" Remove trailing whitespace
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nmap <leader>W :cal StripTrailingWhitespace()<cr>
function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<cr>
        normal `z
        retab
    endif
endfunction

" Blank line above
nmap <space>O O<Esc>
" Blank line below
nmap <space>o o<Esc>

" Comment and uncomment out a section (uses marks 'a and 'b)
nmap <space>z :'a,'b s/^/#/
nmap <space>y :'a,'b s/#//

" Duplicate line, comment original using vim-commentary
nmap <space>n YPgccj<Esc>

" Insert timestamps
inoremap <silent> <C-G><C-T> <C-R>=repeat(complete(col('.'),map(["%Y-%m-%d %H:%M:%S","%a, %d %b %Y %H:%M:%S %z","%Y %b %d","%d-%b-%y","%a %b %d %T %Z %Y"],'strftime(v:val)')+[localtime()]),0)<CR>

" " Automatically set paste mode in Vim when pasting in insert mode per
" " https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
" let &t_SI .= "\<Esc>[?2004h"
" let &t_EI .= "\<Esc>[?2004l"
" inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" function! XTermPasteBegin()
"     set pastetoggle=<Esc>[201~
"     set paste
"     return ""
" endfunction

" change textwidth
nmap <leader>tw :set textwidth=

" change tab settings
nmap <leader>2:set shiftwidth=2<CR>:set softtabstop=2<CR>:set tabstop=2<CR>
nmap <leader>4:set shiftwidth=4<CR>:set softtabstop=4<CR>:set tabstop=4<CR>
nmap <leader>8:set shiftwidth=8<CR>:set softtabstop=8<CR>:set tabstop=8<CR>

" Copy paths
if has('win32')
  nmap <Leader>cs :let @*=substitute(expand("%"), "/", "\\", "g")<CR>:echom expand("%:p") "copied to clipboard"<CR>
  nmap <Leader>cl :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>:echom expand("%:p") "copied to clipboard"<CR>
  " This will copy the path in 8.3 short format, for DOS and Windows 9x
  nmap <Leader>c8 :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>:echom expand("%:p:8") "copied to clipboard"<CR>
elseif has('gui_running') && has('mac')
  nmap <Leader>cs :let @*=expand("%")<CR>:echom expand("%") "copied to clipboard"<CR>
  nmap <Leader>cl :let @*=expand("%:p")<CR>:echom expand("%:p") "copied to clipboard"<CR>
endif

command! -bar -nargs=1 -complete=file E :exe "edit ".substitute(<q-args>,'\(.*\):\(\d\+\):\=$','+\2 \1','')
command! -bar -nargs=? -bang Scratch :silent enew<bang>|set buftype=nofile bufhidden=hide noswapfile buflisted filetype=<args> modifiable
function! s:scratch_maps() abort
  nnoremap <silent> <buffer> == :Scratch<CR>
  nnoremap <silent> <buffer> =" :Scratch<Bar>put<Bar>1delete _<Bar>filetype detect<CR>
  nnoremap <silent> <buffer> =* :Scratch<Bar>put *<Bar>1delete _<Bar>filetype detect<CR>
  nnoremap          <buffer> =f :Scratch<Bar>setfiletype<Space>
endfunction

" Quickly edit/reload the vimrc file
"nmap <silent> <leader>sv :e $MYVIMRC<CR>
map <Leader>v  :so ~/.vimrc<CR>
" Auto load .vimrc on write
au! BufWritePost .source vimrc %

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NeoBundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
 if &compatible
   set nocompatible               " Be iMproved
 endif

 " Required:
 set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
" DISABLED
"NeoBundle 'tpope/vim-vinegar' "I like filebeagle more
"NeoBundle 'Lokaltog/vim-easymotion'
"NeoBundle 'jeetsukumaran/vim-buffergator'
"NeoBundle 'jooize/vim-colemak'
"NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'scrooloose/syntastic'
"NeoBundle 'sjl/gundo.vim.git'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'bling/vim-airline'
NeoBundle 'elzr/vim-json'
NeoBundle 'gmarik/Vundle.vim'
NeoBundle 'haya14busa/incsearch.vim', 'dev' "dev branch for MacVim paste fix: https://github.com/haya14busa/incsearch.vim/issues/35#issuecomment-67504976
NeoBundle 'jeetsukumaran/vim-filebeagle'
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'mbbill/undotree'
NeoBundle 'michaeljsmith/vim-indent-object'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-sensible'
NeoBundle 'tpope/vim-sleuth'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'mattn/gist-vim', {'depends': 'mattn/webapi-vim'}

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin configs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Buffergator
"
let g:buffergator_suppress_keymaps = 1

"
" CtrlP
"
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP' " quick buffer switching

let g:ctrlp_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files'],
            \ },
            \ 'fallback': 'find %s -type f'
            \ }

" Use nearest .git dir
let g:ctrlp_working_path_mode = 'ra'

"
" EasyMotion
"
"let g:EasyMotion_do_mapping = 0 " Disable default mappings
"
"" Bi-directional find motion
"" Jump to anywhere you want with minimal keystrokes, with just one key binding.
"" `s{char}{label}`
"nmap s <Plug>(easymotion-s2)
"nmap t <Plug>(easymotion-t2)
"
"" `s{char}{char}{label}`
"" Need one more keystroke, but on average, it may be more comfortable.
""nmap s <Plug>(easymotion-s2)
"
"" Turn on case sensitive feature
"let g:EasyMotion_smartcase = 1
"
"" JK motions: Line motions
"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)

"
" gist-vim
"
if has("mac")
  let g:gist_clip_command = 'pbcopy'
end

"
" gitgutter
"
highlight clear SignColumn " For the same appearance as your line number column
let g:gitgutter_map_keys = 0 " No default keys

"
" Gundo
"
"nnoremap <F5> :GundoToggle<CR>

"
" incsearch.vim
"
map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)
let g:incsearch#auto_nohlsearch = 1
" map n  <Plug>(incsearch-nohl-n)
" map N  <Plug>(incsearch-nohl-N)
" map *  <Plug>(incsearch-nohl-*)
" map #  <Plug>(incsearch-nohl-#)
" map g* <Plug>(incsearch-nohl-g*)
" map g# <Plug>(incsearch-nohl-g#)

"
" Sneak
"
let g:sneak#streak = 1
let g:sneak#s_next = 1
let g:sneak#use_ic_scs = 1

"
" Solarized
" Theme not accessible until Bundle command is run per
" https://github.com/gmarik/Vundle.vim/issues/119#issuecomment-3089931
call togglebg#map("<F4>")
syntax enable
"let g:solarized_termcolors=256
colorscheme solarized

"
" vim-airline
"
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline_theme='solarized'
" let g:airline_powerline_fonts = 1

"
" vim-json
"
let g:vim_json_syntax_conceal = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AutoCommands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Move help to right, resize 80
if has('autocmd')
  function! ILikeHelpToTheRight()
    if !exists('w:help_is_moved') || w:help_is_moved != "right"
      wincmd L
      vertical resize 80
      let w:help_is_moved = "right"
    endif
  endfunction

  augroup HelpPages
    autocmd FileType help nested call ILikeHelpToTheRight()
  augroup END
endif

augroup Misc
    autocmd!

    autocmd FileType netrw call s:scratch_maps()
    autocmd FocusLost   * silent! wall
augroup END

" Deprecated
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Not sure why I have this... research later
" :nnoremap <Leader>s :let @x=@" \| let @"=@a \| let @a=@b \| let @b=@x<CR>

" Timestamps
" map ,t <Esc>o# Created: TIME<Esc>ASTAMP by foolishbrilliance<CR># Last Modified: TIME<Esc>ASTAMP by foolishbrilliance<Esc>

" Toggle Spell-check
" nmap ,s <C-o>:setlocal spell! spelllang=en_gb<CR>
" nmap ,s :setlocal spell! spelllang=en_gb<CR>

"
" for colemak-vim
"
" Fix for colemak.vim keymap collision. tpope/vim-fugitive's maps y<C-G>
" and colemak.vim maps 'y' to 'w' (word). In combination this stalls 'y'
" because Vim must wait to see if the user wants to press <C-G> as well.
"augroup RemoveFugitiveMappingForColemak
"    autocmd!
"    autocmd BufEnter * silent! execute "nunmap <buffer> <silent> y<C-G>"
"augroup END

" It is recommended to load colemak.vim after all other Vim scripts. If you
" use Vundle or Pathogen, I suggest adding a line to reload the script at the
" bottom of your Vim configuration file.
"silent! source "$HOME/.vim/bundle/vim-colemak/plugin/colemak.vim"

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
