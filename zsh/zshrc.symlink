# grml-zsh-config (will source .zshrc.pre before and .zshrc.local after)
if [ ! -d $HOME/.grml-etc-core ]; then
  echo "  Installing grml-zsh-config for you."
  git clone git://git.grml.org/grml-etc-core.git ~/.grml-etc-core
  ln -s ~/.grml-etc-core/etc/zsh/zshrc ~/.grml-zsh-config
fi
if [[ -a ~/.grml-zsh-config ]]
then
  source ~/.grml-zsh-config
  # Pure: Pretty, minimal and fast ZSH prompt
  # https://github.com/sindresorhus/pure
  autoload -U promptinit; promptinit
  prompt pure

  # Add sad smiley for failed commands
  zstyle ':prompt:grml:right:setup' items time sad-smiley
fi

# update prompt with current time when a command is started: http://stackoverflow.com/a/26585789
strlen () {
    FOO=$1
    local zero='%([BSUbfksu]|([FB]|){*})'
    LEN=${#${(S%%)FOO//$~zero/}}
    echo $LEN
}

# show right prompt with date ONLY when command is executed
preexec () {
    DATE=$( date +"[%H:%M:%S]" )
    local len_right=$( strlen "$DATE" )
    len_right=$(( $len_right+1 ))
    local right_start=$(($COLUMNS - $len_right))

    local len_cmd=$( strlen "$@" )
    local len_prompt=$(strlen "$PROMPT" )
    local len_left=$(($len_cmd+$len_prompt))

    RDATE="\033[${right_start}C ${DATE}"

    if [ $len_left -lt $right_start ]; then
        # command does not overwrite right prompt
        # ok to move up one line
        echo -e "\033[1A${RDATE}"
    else
        echo -e "${RDATE}"
    fi

}

# Use newer GNU core utilities (those that come with OS X are outdated)
if command -v brew &>/dev/null; then
  export PATH=$(brew --prefix coreutils)/libexec/gnubin:$PATH
fi

################################################################################
## BEGIN holman/dotfiles
# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
## END holman/dotfiles

################################################################################
# My custom config
################################################################################

export PATH="$HOME/.dotfiles/bin:$HOME/bin.private:$HOME/bin:$HOME/bin.linux:/usr/local/bin:/usr/local/sbin:$PATH"
export MANPATH="/usr/local/man:$MANPATH"

# For Cask per https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md
# --appdir=/my/path changes the path where the symlinks to the applications (above) will be generated. This is commonly used to create the links in the root Applications directory instead of the home Applications directory by specifying --appdir=/Applications. Default is ~/Applications.
if command -v brew &>/dev/null; then
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
fi

# GPG: You should always add the following lines to your .bashrc or whatever initialization file is used for all shell invocations. Per https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
GPG_TTY=$(tty)
export GPG_TTY

# GRC colorizes nifty unix tools all over the place
if command -v grc &>/dev/null && command -v brew &>/dev/null
then
  source `brew --prefix`/etc/grc.bashrc
fi

# k - For pretty ls alternative - https://github.com/supercrabtree/k
source $HOME/k/k.sh

# nvim
export NVIM_TUI_ENABLE_TRUE_COLOR=1

# Ruby 
# init rbenv according to man page
if (( $+commands[rbenv] ))
then
  eval "$(rbenv init -)"
fi

# use .zshrc.secret for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.zshrc.secret ]]
then
  source ~/.zshrc.secret
fi
