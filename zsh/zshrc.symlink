# -*-sh-*-

# Fix Emacs TRAMP per https://www.emacswiki.org/emacs/TrampMode#toc7
[ $TERM = "dumb" ] && unsetopt zle && PS1='$ ' && return

# grml-zsh-config (will source .zshrc.pre before and .zshrc.local after)
if [ ! -d $HOME/.grml-etc-core ]; then
  echo "  Installing grml-zsh-config for you."
  git clone git://git.grml.org/grml-etc-core.git ~/.grml-etc-core
  ln -s ~/.grml-etc-core/etc/zsh/zshrc ~/.grml-zsh-config
fi
FILE="${HOME}/.grml-zsh-config"; [ -f $FILE ] && . $FILE

# grml functions used after this point
# check_com, is-at-least, xsource

################################################################################
## BEGIN holman/dotfiles
# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
## END holman/dotfiles

################################################################################
# My custom config
################################################################################

################################################################################
##################################### PATH #####################################
################################################################################
# Prefer GNU tools over BSD tools
if check_com -c brew; then
  # use over $(brew --prefix coreutils)/libexec/gnubin
  local GNU_BIN=/usr/local/opt/coreutils/libexec/gnubin
  if command -v $GNU_BIN/ls &>/dev/null ; then
    export PATH=$GNU_BIN:$PATH # Use newer GNU core utilities (those that come with OS X are outdated)
  fi
fi

if check_com -c brew; then
  # For Cask per https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md
  # --appdir=/my/path changes the path where the symlinks to the applications (above) will be generated. This is commonly used to create the links in the root Applications directory instead of the home Applications directory by specifying --appdir=/Applications. Default is ~/Applications.
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export PATH=/usr/local/sbin:$PATH # Brew installs binaries here too
  export MANPATH="/usr/local/man:$MANPATH"
fi

for d in \
    $HOME/.cargo/bin `# rust` \
    /usr/local/opt/python/libexec/bin \
    $HOME/bin \
    $HOME/bin.linux \
    $HOME/bin.private \
    $HOME/.dotfiles/bin \
    ; do
  if [ -d $d ]; then
    export PATH=$d:$PATH
  fi
done

################################################################################
################################# zsh options ##################################
################################################################################
# It is useful to have set -o pipefail somewhere in your shell startup (see [here](https://sipb.mit.edu/doc/safe-shell/) for details), otherwise pushd happens even if you exit with ctrl-c and clutters up the directory stack.
set -o pipefail

# To allow for ^s to fwd-i-search (opposite of ^r), disable XON/XOFF for interactive shells per https://stackoverflow.com/questions/791765/unable-to-forward-search-bash-history-similarly-as-with-ctrl-r#comment39602061_791800
# [[ $- == *i* ]] && stty -ixon # [[ is not POSIX
case "$-" in; *i*) stty -ixon;; esac # POSIX

################################################################################
############################# zgen plugin manager ##############################
################################################################################
# Install zgen, if neccessary
[ -d $HOME/.zgen ] || git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"

# These files will be checked and if a change is detected zgen reset is called.
ZGEN_RESET_ON_CHANGE=(${HOME}/.zshrc)

xsource "${HOME}/.zgen/zgen.zsh" # load zgen

# if the init scipt doesn't exist
if ! zgen saved; then

  # specify plugins here
  zgen load djui/alias-tips
  zgen load zdharma/fast-syntax-highlighting
  zgen load supercrabtree/k
  zgen load peterhurford/up.zsh
  zgen load unixorn/warhol.plugin.zsh

  # prompt
  zgen load mafredri/zsh-async
  zgen load sindresorhus/pure

  # generate the init script from plugins above
  zgen save
fi

################################################################################
##################################### apps #####################################
################################################################################
# Fzf - A command-line fuzzy finder written in Go -  https://github.com/junegunn/fzf#using-homebrew-or-linuxbrew
export FZF_DEFAULT_OPTS='--height 40% --reverse --border --ansi'
# auto select if only 1 result, exit if no results
export FZF_CTRL_T_OPTS="--select-1 --exit-0 $FZF_CTRL_T_OPTS"

# Use fd (https://github.com/sharkdp/fd) with fzf if possible
if check_com -c fd; then
  # Setting fd as the default source for fzf
  export FZF_DEFAULT_COMMAND="fd --type file --follow --hidden --color=always"
  export FZF_CTRL_T_COMMAND="fd --type file --color=always"
  export FZF_ALT_C_COMMAND="fd --type d --color=always"

  # Use fd for listing path candidates.
  # - The first argument to the function ($1) is the base path to start traversal
  # - See the source code (completion.{bash,zsh}) for the details.
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }
fi

if check_com -c highlight; then
  # using highlight (http://www.andre-simon.de/doku/highlight/en/highlight.html)
  export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200' $FZF_CTRL_T_OPTS"
fi
# Preview full command in CTRL+R with ?
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

# GPG: You should always add the following lines to your .bashrc or whatever initialization file is used for all shell invocations. Per https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
export GPG_TTY=$(tty)

# GNU ls colors
if [ -e ~/.dir_colors ]; then
  check_com -c dircolors && eval $(dircolors -b ~/.dir_colors)
else
  curl https://raw.githubusercontent.com/huyz/dircolors-solarized/master/dircolors.ansi-universal -o ~/.dir_colors
fi

# For gtags per https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Btags/gtags#install-on-osx-using-homebrew
check_com -c pygments && export GTAGSLABEL=pygments

# nvim
check_com -c nvim && export NVIM_TUI_ENABLE_TRUE_COLOR=1

################################################################################
#################################### Prompt ####################################
################################################################################
if is-at-least "5.2"; then # Pure prompt requires ZSH 5.2+

  # Setup per https://github.com/sindresorhus/pure#manually
  zfun="${HOME}/.zfunctions"
  if [ ! -d "${zfun}" ]; then
    mkdir -p "${zfun}" \
      && ln -s ~/.zgen/sindresorhus/pure-master/pure.zsh "${zfun}/prompt_pure_setup" \
      && ln -s ~/.zgen/sindresorhus/pure-master/async.zsh "${zfun}/async"
  fi
  fpath=( "$HOME/.zfunctions" $fpath )

  # Pure: Pretty, minimal and fast ZSH prompt
  # https://github.com/sindresorhus/pure
  autoload -U promptinit; promptinit
  prompt pure

  PURE_PROMPT_SYMBOL='>'
  PURE_GIT_DOWN_ARROW='↑'
  PURE_GIT_UP_ARROW='↓'
  PROMPT='%(?.%F{green}$PURE_PROMPT_SYMBOL.%F{red}$PURE_PROMPT_SYMBOL)%f '

  # update prompt with current time when a command is started: http://stackoverflow.com/a/26585789
  strlen () {
    FOO=$1
    local zero='%([BSUbfksu]|([FB]|){*})'
    LEN=${#${(S%%)FOO//$~zero/}}
    echo $LEN
  }

  # show right prompt with date ONLY when command is executed
  # rename this function to preexec() in order to enable the date on the prompt
  preexec_disabled () {
    DATE=$( date +"[%H:%M:%S]" )
    local len_right=$( strlen "$DATE" )
    len_right=$(( $len_right+1 ))
    local right_start=$(($COLUMNS - $len_right))

    local len_cmd=$( strlen "$@" )
    local len_prompt=$(strlen "$PROMPT" )
    local len_left=$(($len_cmd+$len_prompt))

    RDATE="\033[${right_start}C ${DATE}"

    if [ $len_left -lt $right_start ]; then
      # command does not overwrite right prompt
      # ok to move up one line
      echo -e "\033[1A${RDATE}"
    else
      echo -e "${RDATE}"
    fi
  }
else # fallback to grml prompt
  prompt grml
  # Add time and sad smiley for failed commands
  zstyle ':prompt:grml:right:setup' items time sad-smiley
fi

# Source additional zsh files, if they exist
xsource /usr/local/share/chruby/chruby.sh \
  /usr/local/share/chruby/auto.sh
xsource ~/.fzf.zsh
xsource ~/.iterm2_shell_integration.zsh
xsource ~/.zshrc.secret # last, for secrets

