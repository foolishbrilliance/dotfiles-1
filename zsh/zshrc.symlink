# -*- mode: sh; -*-
# vim: filetype=zsh

# Fix Emacs TRAMP per https://www.emacswiki.org/emacs/TrampMode#toc7
[ $TERM = "dumb" ] && unsetopt zle && PS1='$ ' && return

# utility functions
autoload -Uz is-at-least

# grml functions used after this point
# check_com, isdarwin, is-at-least, xsource

# copied from https://github.com/grml/grml-etc-core/blob/ffe57c8786bf71c015d948eff4253089725b9f8e/etc/zsh/zshrc#L458
# this function checks if a command exists and returns either true
# or false. This avoids using 'which' and 'whence', which will
# avoid problems with aliases for which on certain weird systems. :-)
# Usage: check_com [-c|-g] word
#   -c  only checks for external commands
#   -g  does the usual tests and also checks for global aliases
function check_com () {
    emulate -L zsh
    local -i comonly gatoo
    comonly=0
    gatoo=0

    if [[ $1 == '-c' ]] ; then
        comonly=1
        shift 1
    elif [[ $1 == '-g' ]] ; then
        gatoo=1
        shift 1
    fi

    if (( ${#argv} != 1 )) ; then
        printf 'usage: check_com [-c|-g] <command>\n' >&2
        return 1
    fi

    if (( comonly > 0 )) ; then
        (( ${+commands[$1]}  )) && return 0
        return 1
    fi

    if     (( ${+commands[$1]}    )) \
        || (( ${+functions[$1]}   )) \
        || (( ${+aliases[$1]}     )) \
        || (( ${+reswords[(r)$1]} )) ; then
        return 0
    fi

    if (( gatoo > 0 )) && (( ${+galiases[$1]} )) ; then
        return 0
    fi

    return 1
}

function isdarwin () {
  [[ "$OSTYPE" != darwin* ]]
}

# Check if we can read given files and source those we can.
# copied from https://github.com/grml/grml-etc-core/blob/ffe57c8786bf71c015d948eff4253089725b9f8e/etc/zsh/zshrc#L539
function xsource () {
    if (( ${#argv} < 1 )) ; then
        printf 'usage: xsource FILE(s)...\n' >&2
        return 1
    fi

    while (( ${#argv} > 0 )) ; do
        [[ -r "$1" ]] && source "$1"
        shift
    done
    return 0
}

# from old grml config
xsource ${HOME}/.zshrc.pre ${HOME}/.zshrc.local

# load zprezto
source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"

################################################################################
## BEGIN holman/dotfiles
# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path, completion, and prezto init.zsh files
# the prezto files will be loaded by prezto, so don't load them twice
for file in ${${${config_files:#*/path.zsh}:#*/completion.zsh}:#*/init.zsh}
do
  source $file
done

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
## END holman/dotfiles

################################################################################
# My custom config
################################################################################

################################################################################
################################# zsh options ##################################
################################################################################
# To allow for ^s to fwd-i-search (opposite of ^r), disable XON/XOFF for interactive shells per https://stackoverflow.com/questions/791765/unable-to-forward-search-bash-history-similarly-as-with-ctrl-r#comment39602061_791800
# [[ $- == *i* ]] && stty -ixon # [[ is not POSIX
case "$-" in; *i*) stty -ixon;; esac # POSIX

################################################################################
############################# zgen plugin manager ##############################
################################################################################
# Install zgen, if neccessary
[ -d $HOME/.zgen ] || git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"

# These files will be checked and if a change is detected zgen reset is called.
ZGEN_RESET_ON_CHANGE=(${HOME}/.zshrc)

(( ${+aliases[up]} )) && unalias up # grml alias conflicts with up.zsh plugin
xsource "${HOME}/.zgen/zgen.zsh" # load zgen

# if the init scipt doesn't exist
if ! zgen saved; then

  # specify plugins here
  zgen load djui/alias-tips
  zgen load zdharma/fast-syntax-highlighting
  zgen load peterhurford/up.zsh
  zgen load unixorn/warhol.plugin.zsh

  # prompt
  #zgen load mafredri/zsh-async
  #zgen load sindresorhus/pure

  # generate the init script from plugins above
  zgen save
fi

################################################################################
##################################### apps #####################################
################################################################################

# Brew
if check_com -c brew; then
  # For Cask per https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md
  # --appdir=/my/path changes the path where the symlinks to the applications (above) will be generated. This is commonly used to create the links in the root Applications directory instead of the home Applications directory by specifying --appdir=/Applications. Default is ~/Applications.
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
fi

# GPG: You should always add the following lines to your .bashrc or whatever initialization file is used for all shell invocations. Per https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
export GPG_TTY=$(tty)

# GNU ls colors
if [ -e ~/.dir_colors ]; then
  check_com -c dircolors && eval $(dircolors -b ~/.dir_colors)
else
  curl https://raw.githubusercontent.com/huyz/dircolors-solarized/master/dircolors.ansi-universal -o ~/.dir_colors
fi

# For gtags per https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Btags/gtags#install-on-osx-using-homebrew
check_com -c pygments && export GTAGSLABEL=pygments

# nvim
check_com -c nvim && export NVIM_TUI_ENABLE_TRUE_COLOR=1

################################################################################
#################################### Prompt ####################################
################################################################################

xsource /usr/local/share/chruby/chruby.sh \
  /usr/local/share/chruby/auto.sh

# iterm2
# if running in tmux, enable iterm2 integration and badge support
case "$TERM" in
  *screen*|*tmux*)
    export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=1

    # https://groups.google.com/d/msg/iterm2-discuss/RYVdkJyWIJo/9bO44sfIBQAJ
    function iterm2_print_user_vars() {
      NAME=hostname
      VALUE=$(hostname)
      printf "\033Ptmux;\033\033]1337;SetUserVar=%s=%s\a\033\\" "$NAME" $(printf "%s" "$VALUE" | base64 | tr -d '\n')
    }
    ;;
  *)
    # https://www.iterm2.com/documentation-badges.html
    iterm2_print_user_vars() {
        iterm2_set_user_var hostname $(hostname)
      }
    ;;
esac
[[ -f ~/.iterm2_shell_integration.zsh ]] || curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh ||'ERROR: failed to download iterm2 shell integration'
xsource ~/.iterm2_shell_integration.zsh

xsource ~/.zshrc.secret # last, for secrets

