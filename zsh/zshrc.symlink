# -*- mode: sh; -*-
# vim: filetype=zsh

# Fix Emacs TRAMP per https://www.emacswiki.org/emacs/TrampMode#toc7
[ $TERM = "dumb" ] && unsetopt zle && PS1='$ ' && return

# grml-zsh-config (will source .zshrc.pre before and .zshrc.local after)
if [ ! -d $HOME/.grml-etc-core ]; then
  echo "  Installing grml-zsh-config for you."
  git clone git://git.grml.org/grml-etc-core.git ~/.grml-etc-core
fi
FILE="${HOME}/.grml-etc-core/etc/zsh/zshrc"; [ -f $FILE ] && . $FILE

# grml functions used after this point
# check_com, is-at-least, xsource

################################################################################
## BEGIN holman/dotfiles
# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
## END holman/dotfiles

################################################################################
# My custom config
################################################################################

################################################################################
##################################### PATH #####################################
################################################################################
# Prefer GNU tools over BSD tools
if check_com -c brew; then
  # use over $(brew --prefix coreutils)/libexec/gnubin
  local GNU_BIN=/usr/local/opt/coreutils/libexec/gnubin
  if command -v $GNU_BIN/ls &>/dev/null ; then
    export PATH=$GNU_BIN:$PATH # Use newer GNU core utilities (those that come with OS X are outdated)
  fi
fi

if check_com -c brew; then
  # For Cask per https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md
  # --appdir=/my/path changes the path where the symlinks to the applications (above) will be generated. This is commonly used to create the links in the root Applications directory instead of the home Applications directory by specifying --appdir=/Applications. Default is ~/Applications.
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export PATH=/usr/local/sbin:$PATH # Brew installs binaries here too
  export MANPATH="/usr/local/man:$MANPATH"
fi

for d in \
    $HOME/.cargo/bin `# rust` \
    /usr/local/opt/python/libexec/bin \
    $HOME/bin \
    $HOME/bin.linux \
    $HOME/bin.private \
    $HOME/.dotfiles/bin \
    ; do
  if [ -d $d ]; then
    export PATH=$d:$PATH
  fi
done

################################################################################
################################# zsh options ##################################
################################################################################
# It is useful to have set -o pipefail somewhere in your shell startup (see [here](https://sipb.mit.edu/doc/safe-shell/) for details), otherwise pushd happens even if you exit with ctrl-c and clutters up the directory stack.
set -o pipefail

# To allow for ^s to fwd-i-search (opposite of ^r), disable XON/XOFF for interactive shells per https://stackoverflow.com/questions/791765/unable-to-forward-search-bash-history-similarly-as-with-ctrl-r#comment39602061_791800
# [[ $- == *i* ]] && stty -ixon # [[ is not POSIX
case "$-" in; *i*) stty -ixon;; esac # POSIX

################################################################################
############################# zgen plugin manager ##############################
################################################################################
# Install zgen, if neccessary
[ -d $HOME/.zgen ] || git clone https://github.com/tarjoilija/zgen.git "${HOME}/.zgen"

# These files will be checked and if a change is detected zgen reset is called.
ZGEN_RESET_ON_CHANGE=(${HOME}/.zshrc)

(( ${+aliases[up]} )) && unalias up # grml alias conflicts with up.zsh plugin
xsource "${HOME}/.zgen/zgen.zsh" # load zgen

# if the init scipt doesn't exist
if ! zgen saved; then

  # specify plugins here
  zgen load djui/alias-tips
  zgen load zdharma/fast-syntax-highlighting
  zgen load peterhurford/up.zsh
  zgen load unixorn/warhol.plugin.zsh

  # prompt
  zgen load mafredri/zsh-async
  #zgen load sindresorhus/pure

  # generate the init script from plugins above
  zgen save
fi

################################################################################
##################################### apps #####################################
################################################################################
# Fzf - A command-line fuzzy finder written in Go -  https://github.com/junegunn/fzf#using-homebrew-or-linuxbrew
xsource ~/.fzf.zsh
export FZF_DEFAULT_OPTS='--height 40% --reverse --border --ansi'
# auto select if only 1 result, exit if no results
export FZF_CTRL_T_OPTS="--select-1 --exit-0 $FZF_CTRL_T_OPTS"

# Dedicated completion key
# > Instead of using `TAB` key with a trigger sequence (`**<TAB>`), you can assign a dedicated key for fuzzy completion while retaining the default behavior of `TAB` key.
# > https://github.com/junegunn/fzf/wiki/Configuring-fuzzy-completion#dedicated-completion-key
export FZF_COMPLETION_TRIGGER=''
bindkey '^T' fzf-completion
bindkey '^I' $fzf_default_completion

# Use fd (https://github.com/sharkdp/fd) with fzf if possible
if check_com -c fd; then
  # Setting fd as the default source for fzf
  export FZF_DEFAULT_COMMAND="fd --type file --follow --hidden --color=always"
  export FZF_CTRL_T_COMMAND="fd --type file --color=always"
  export FZF_ALT_C_COMMAND="fd --type d --color=always"

  # Use fd for listing path candidates.
  # - The first argument to the function ($1) is the base path to start traversal
  # - See the source code (completion.{bash,zsh}) for the details.
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }
fi

if check_com -c highlight; then
  # using highlight (http://www.andre-simon.de/doku/highlight/en/highlight.html)
  export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200' $FZF_CTRL_T_OPTS"
fi
# Preview full command in CTRL+R with ?
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

# GPG: You should always add the following lines to your .bashrc or whatever initialization file is used for all shell invocations. Per https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
export GPG_TTY=$(tty)

# GNU ls colors
if [ -e ~/.dir_colors ]; then
  check_com -c dircolors && eval $(dircolors -b ~/.dir_colors)
else
  curl https://raw.githubusercontent.com/huyz/dircolors-solarized/master/dircolors.ansi-universal -o ~/.dir_colors
fi

# For gtags per https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Btags/gtags#install-on-osx-using-homebrew
check_com -c pygments && export GTAGSLABEL=pygments

# nvim
check_com -c nvim && export NVIM_TUI_ENABLE_TRUE_COLOR=1

################################################################################
#################################### Prompt ####################################
################################################################################
zstyle ':prompt:grml:right:setup' items time sad-smiley

xsource /usr/local/share/chruby/chruby.sh \
  /usr/local/share/chruby/auto.sh

# iterm2
# if running in tmux, enable iterm2 integration and badge support
case "$TERM" in
  *screen*|*tmux*)
    export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=1

    # https://groups.google.com/d/msg/iterm2-discuss/RYVdkJyWIJo/9bO44sfIBQAJ
    function iterm2_print_user_vars() {
      NAME=hostname
      VALUE=$(hostname)
      printf "\033Ptmux;\033\033]1337;SetUserVar=%s=%s\a\033\\" "$NAME" $(printf "%s" "$VALUE" | base64 | tr -d '\n')
    }
    ;;
  *)
    # https://www.iterm2.com/documentation-badges.html
    iterm2_print_user_vars() {
        iterm2_set_user_var hostname $(hostname)
      }
    ;;
esac
[[ -f ~/.iterm2_shell_integration.zsh ]] || curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh ||'ERROR: failed to download iterm2 shell integration'
xsource ~/.iterm2_shell_integration.zsh

xsource ~/.zshrc.secret # last, for secrets

