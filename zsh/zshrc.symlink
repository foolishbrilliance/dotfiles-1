# grml-zsh-config (will source .zshrc.pre before and .zshrc.local after)
if [ ! -d $HOME/.grml-etc-core ]; then
  echo "  Installing grml-zsh-config for you."
  git clone git://git.grml.org/grml-etc-core.git ~/.grml-etc-core
  ln -s ~/.grml-etc-core/etc/zsh/zshrc ~/.grml-zsh-config
fi
if [[ -a ~/.grml-zsh-config ]]
then
  source ~/.grml-zsh-config
  # Pure: Pretty, minimal and fast ZSH prompt
  # https://github.com/sindresorhus/pure
  autoload -U promptinit; promptinit
  prompt pure

  # Add sad smiley for failed commands
  zstyle ':prompt:grml:right:setup' items time sad-smiley
fi

# update prompt with current time when a command is started: http://stackoverflow.com/a/26585789
strlen () {
    FOO=$1
    local zero='%([BSUbfksu]|([FB]|){*})'
    LEN=${#${(S%%)FOO//$~zero/}}
    echo $LEN
}

# show right prompt with date ONLY when command is executed
preexec () {
    DATE=$( date +"[%H:%M:%S]" )
    local len_right=$( strlen "$DATE" )
    len_right=$(( $len_right+1 ))
    local right_start=$(($COLUMNS - $len_right))

    local len_cmd=$( strlen "$@" )
    local len_prompt=$(strlen "$PROMPT" )
    local len_left=$(($len_cmd+$len_prompt))

    RDATE="\033[${right_start}C ${DATE}"

    if [ $len_left -lt $right_start ]; then
        # command does not overwrite right prompt
        # ok to move up one line
        echo -e "\033[1A${RDATE}"
    else
        echo -e "${RDATE}"
    fi

}

################################################################################
## BEGIN holman/dotfiles
# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/projects

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files
## END holman/dotfiles

################################################################################
# My custom config
################################################################################

if check_com -c brew ; then
  # For Cask per https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md
  # --appdir=/my/path changes the path where the symlinks to the applications (above) will be generated. This is commonly used to create the links in the root Applications directory instead of the home Applications directory by specifying --appdir=/Applications. Default is ~/Applications.
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
  export PATH=$(brew --prefix coreutils)/libexec/gnubin:$PATH # Use newer GNU core utilities (those that come with OS X are outdated)
  export PATH=/usr/local/sbin:$PATH # Brew installs binaries here too
fi

export PATH="$HOME/.dotfiles/bin:$HOME/bin.private:$HOME/bin:$HOME/bin.linux:/usr/local/opt/python/libexec/bin:$PATH"
export MANPATH="/usr/local/man:$MANPATH"

set -o pipefail # It is useful to have set -o pipefail somewhere in your shell startup (see [here](https://sipb.mit.edu/doc/safe-shell/) for details), otherwise pushd happens even if you exit with ctrl-c and clutters up the directory stack.

# load zgen
source "${HOME}/.zgen/zgen.zsh"

# if the init scipt doesn't exist
if ! zgen saved; then

  # specify plugins here
  zgen load djui/alias-tips
  zgen load zdharma/fast-syntax-highlighting
  zgen load supercrabtree/k
  zgen load peterhurford/up.zsh
  zgen load unixorn/warhol.plugin.zsh
  
  # generate the init script from plugins above
  zgen save
fi

# Fzf - A command-line fuzzy finder written in Go -  https://github.com/junegunn/fzf#using-homebrew-or-linuxbrew
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS='--height 40% --reverse --border'
# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND="fd --type file --follow --color=always"
export FZF_DEFAULT_OPTS="--ansi"
# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# GPG: You should always add the following lines to your .bashrc or whatever initialization file is used for all shell invocations. Per https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
GPG_TTY=$(tty); export GPG_TTY

# nvim
export NVIM_TUI_ENABLE_TRUE_COLOR=1
check_com -c nvim && export EDITOR=nvim

# Ruby 
# init rbenv according to man page
# if (( $+commands[rbenv] ))
# then
#   eval "$(rbenv init -)"
# fi

# To allow for ^s to fwd-i-search (opposite of ^r), disable XON/XOFF for interactive shells per https://stackoverflow.com/questions/791765/unable-to-forward-search-bash-history-similarly-as-with-ctrl-r#comment39602061_791800
[[ $- == *i* ]] && stty -ixon

# use .zshrc.secret for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
if [[ -a ~/.zshrc.secret ]]
then
  source ~/.zshrc.secret
fi
